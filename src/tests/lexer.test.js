import { Lexer } from '../core/lexer';
import { Token } from '../core/tokens';
describe('Lexer Tests', () => {
    const runLexerTest = (source, expectedTokens) => {
        const lexer = new Lexer(source);
        const tokens = lexer.scanTokens();
        const tokenTypes = tokens.map(t => t.token);
        expect(tokenTypes).toEqual(expectedTokens);
    };
    test('simple variable declaration and assignment', () => {
        runLexerTest('var x = 5', [Token.VAR, Token.IDENTIFIER, Token.EQUAL, Token.NUMBER, Token.EOF]);
    });
    test('arithmetic expressions', () => {
        runLexerTest('var result = 2 + 3 * 4', [Token.VAR, Token.IDENTIFIER, Token.EQUAL, Token.NUMBER, Token.PLUS, Token.NUMBER, Token.STAR, Token.NUMBER, Token.EOF]);
    });
    test('while loop', () => {
        runLexerTest('while (x > 0) { x = x - 1 }', [
            Token.WHILE, Token.LEFT_PAREN, Token.IDENTIFIER, Token.GREATER, Token.NUMBER,
            Token.RIGHT_PAREN, Token.LEFT_BRACE, Token.IDENTIFIER, Token.EQUAL,
            Token.IDENTIFIER, Token.MINUS, Token.NUMBER, Token.RIGHT_BRACE, Token.EOF
        ]);
    });
    test('output statement', () => {
        runLexerTest('out 42', [Token.OUT, Token.NUMBER, Token.EOF]);
    });
    test('complete program', () => {
        runLexerTest(`var count = 5
var sum = 0
while (count > 0) {
    sum = sum + count
    count = count - 1
}
out sum`, [
            Token.VAR, Token.IDENTIFIER, Token.EQUAL, Token.NUMBER,
            Token.VAR, Token.IDENTIFIER, Token.EQUAL, Token.NUMBER,
            Token.WHILE, Token.LEFT_PAREN, Token.IDENTIFIER, Token.GREATER, Token.NUMBER,
            Token.RIGHT_PAREN, Token.LEFT_BRACE,
            Token.IDENTIFIER, Token.EQUAL, Token.IDENTIFIER, Token.PLUS, Token.IDENTIFIER,
            Token.IDENTIFIER, Token.EQUAL, Token.IDENTIFIER, Token.MINUS, Token.NUMBER,
            Token.RIGHT_BRACE,
            Token.OUT, Token.IDENTIFIER,
            Token.EOF
        ]);
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGV4ZXIudGVzdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy90ZXN0cy9sZXhlci50ZXN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxLQUFLLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDdEMsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBRXZDLFFBQVEsQ0FBQyxhQUFhLEVBQUUsR0FBRyxFQUFFO0lBQzNCLE1BQU0sWUFBWSxHQUFHLENBQUMsTUFBYyxFQUFFLGNBQXVCLEVBQUUsRUFBRTtRQUMvRCxNQUFNLEtBQUssR0FBRyxJQUFJLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUNoQyxNQUFNLE1BQU0sR0FBRyxLQUFLLENBQUMsVUFBVSxFQUFFLENBQUM7UUFDbEMsTUFBTSxVQUFVLEdBQUcsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUM1QyxNQUFNLENBQUMsVUFBVSxDQUFDLENBQUMsT0FBTyxDQUFDLGNBQWMsQ0FBQyxDQUFDO0lBQzdDLENBQUMsQ0FBQztJQUVGLElBQUksQ0FBQyw0Q0FBNEMsRUFBRSxHQUFHLEVBQUU7UUFDdEQsWUFBWSxDQUNWLFdBQVcsRUFDWCxDQUFDLEtBQUssQ0FBQyxHQUFHLEVBQUUsS0FBSyxDQUFDLFVBQVUsRUFBRSxLQUFLLENBQUMsS0FBSyxFQUFFLEtBQUssQ0FBQyxNQUFNLEVBQUUsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUNwRSxDQUFDO0lBQ0osQ0FBQyxDQUFDLENBQUM7SUFFSCxJQUFJLENBQUMsd0JBQXdCLEVBQUUsR0FBRyxFQUFFO1FBQ2xDLFlBQVksQ0FDVix3QkFBd0IsRUFDeEIsQ0FBQyxLQUFLLENBQUMsR0FBRyxFQUFFLEtBQUssQ0FBQyxVQUFVLEVBQUUsS0FBSyxDQUFDLEtBQUssRUFBRSxLQUFLLENBQUMsTUFBTSxFQUFFLEtBQUssQ0FBQyxJQUFJLEVBQUUsS0FBSyxDQUFDLE1BQU0sRUFBRSxLQUFLLENBQUMsSUFBSSxFQUFFLEtBQUssQ0FBQyxNQUFNLEVBQUUsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUN4SCxDQUFDO0lBQ0osQ0FBQyxDQUFDLENBQUM7SUFFSCxJQUFJLENBQUMsWUFBWSxFQUFFLEdBQUcsRUFBRTtRQUN0QixZQUFZLENBQ1YsNkJBQTZCLEVBQzdCO1lBQ0UsS0FBSyxDQUFDLEtBQUssRUFBRSxLQUFLLENBQUMsVUFBVSxFQUFFLEtBQUssQ0FBQyxVQUFVLEVBQUUsS0FBSyxDQUFDLE9BQU8sRUFBRSxLQUFLLENBQUMsTUFBTTtZQUM1RSxLQUFLLENBQUMsV0FBVyxFQUFFLEtBQUssQ0FBQyxVQUFVLEVBQUUsS0FBSyxDQUFDLFVBQVUsRUFBRSxLQUFLLENBQUMsS0FBSztZQUNsRSxLQUFLLENBQUMsVUFBVSxFQUFFLEtBQUssQ0FBQyxLQUFLLEVBQUUsS0FBSyxDQUFDLE1BQU0sRUFBRSxLQUFLLENBQUMsV0FBVyxFQUFFLEtBQUssQ0FBQyxHQUFHO1NBQzFFLENBQ0YsQ0FBQztJQUNKLENBQUMsQ0FBQyxDQUFDO0lBRUgsSUFBSSxDQUFDLGtCQUFrQixFQUFFLEdBQUcsRUFBRTtRQUM1QixZQUFZLENBQ1YsUUFBUSxFQUNSLENBQUMsS0FBSyxDQUFDLEdBQUcsRUFBRSxLQUFLLENBQUMsTUFBTSxFQUFFLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FDckMsQ0FBQztJQUNKLENBQUMsQ0FBQyxDQUFDO0lBRUgsSUFBSSxDQUFDLGtCQUFrQixFQUFFLEdBQUcsRUFBRTtRQUM1QixZQUFZLENBQ1Y7Ozs7OztRQU1FLEVBQ0Y7WUFDRSxLQUFLLENBQUMsR0FBRyxFQUFFLEtBQUssQ0FBQyxVQUFVLEVBQUUsS0FBSyxDQUFDLEtBQUssRUFBRSxLQUFLLENBQUMsTUFBTTtZQUN0RCxLQUFLLENBQUMsR0FBRyxFQUFFLEtBQUssQ0FBQyxVQUFVLEVBQUUsS0FBSyxDQUFDLEtBQUssRUFBRSxLQUFLLENBQUMsTUFBTTtZQUN0RCxLQUFLLENBQUMsS0FBSyxFQUFFLEtBQUssQ0FBQyxVQUFVLEVBQUUsS0FBSyxDQUFDLFVBQVUsRUFBRSxLQUFLLENBQUMsT0FBTyxFQUFFLEtBQUssQ0FBQyxNQUFNO1lBQzVFLEtBQUssQ0FBQyxXQUFXLEVBQUUsS0FBSyxDQUFDLFVBQVU7WUFDbkMsS0FBSyxDQUFDLFVBQVUsRUFBRSxLQUFLLENBQUMsS0FBSyxFQUFFLEtBQUssQ0FBQyxVQUFVLEVBQUUsS0FBSyxDQUFDLElBQUksRUFBRSxLQUFLLENBQUMsVUFBVTtZQUM3RSxLQUFLLENBQUMsVUFBVSxFQUFFLEtBQUssQ0FBQyxLQUFLLEVBQUUsS0FBSyxDQUFDLFVBQVUsRUFBRSxLQUFLLENBQUMsS0FBSyxFQUFFLEtBQUssQ0FBQyxNQUFNO1lBQzFFLEtBQUssQ0FBQyxXQUFXO1lBQ2pCLEtBQUssQ0FBQyxHQUFHLEVBQUUsS0FBSyxDQUFDLFVBQVU7WUFDM0IsS0FBSyxDQUFDLEdBQUc7U0FDVixDQUNGLENBQUM7SUFDSixDQUFDLENBQUMsQ0FBQztBQUNMLENBQUMsQ0FBQyxDQUFDIn0=