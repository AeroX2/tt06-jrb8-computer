import { Token } from './tokens';
import { Binary, Grouping, Unary, LiteralBool, LiteralString, LiteralNumber, Variable, Assign, Logical, Call } from '../ast/expressions';
import { Expression, If, While, For, Block, Var, Function, Return, Output } from '../ast/statements';
export class ParserError extends Error {
    constructor(message) {
        super(message);
        this.name = 'ParserError';
    }
}
export class Parser {
    tokens;
    current = 0;
    constructor(tokens) {
        this.tokens = tokens;
    }
    peek() {
        return this.tokens[this.current];
    }
    previous() {
        return this.tokens[this.current - 1];
    }
    isAtEnd() {
        return this.peek().token === Token.EOF;
    }
    advance() {
        if (!this.isAtEnd())
            this.current++;
        return this.previous();
    }
    check(type) {
        if (this.isAtEnd())
            return false;
        return this.peek().token === type;
    }
    match(...types) {
        for (const type of types) {
            if (this.check(type)) {
                this.advance();
                return true;
            }
        }
        return false;
    }
    consume(type, message) {
        if (this.check(type))
            return this.advance();
        throw new ParserError(message);
    }
    parse() {
        const statements = [];
        while (!this.isAtEnd()) {
            const decl = this.declaration();
            if (decl)
                statements.push(decl);
        }
        return statements;
    }
    declaration() {
        try {
            if (this.match(Token.FUN))
                return this.function("function");
            if (this.match(Token.VAR))
                return this.varDeclaration();
            return this.statement();
        }
        catch (error) {
            this.synchronize();
            return null;
        }
    }
    function(kind) {
        const name = this.consume(Token.IDENTIFIER, `Expect ${kind} name.`).value;
        this.consume(Token.LEFT_PAREN, `Expect '(' after ${kind} name.`);
        const parameters = [];
        if (!this.check(Token.RIGHT_PAREN)) {
            do {
                if (parameters.length >= 255) {
                    throw new ParserError("Can't have more than 255 parameters.");
                }
                parameters.push(this.consume(Token.IDENTIFIER, "Expect parameter name.").value);
            } while (this.match(Token.COMMA));
        }
        this.consume(Token.RIGHT_PAREN, "Expect ')' after parameters.");
        this.consume(Token.LEFT_BRACE, `Expect '{' before ${kind} body.`);
        const body = this.block();
        return new Function(name, parameters, body);
    }
    varDeclaration() {
        const name = this.consume(Token.IDENTIFIER, "Expect variable name.").value;
        let initializer = null;
        if (this.match(Token.EQUAL)) {
            initializer = this.expression();
        }
        this.match(Token.SEMICOLON);
        return new Var(name, initializer);
    }
    statement() {
        if (this.match(Token.IF))
            return this.ifStatement();
        if (this.match(Token.WHILE))
            return this.whileStatement();
        if (this.match(Token.FOR))
            return this.forStatement();
        if (this.match(Token.RETURN))
            return this.returnStatement();
        if (this.match(Token.OUT))
            return this.outputStatement();
        if (this.match(Token.LEFT_BRACE))
            return new Block(this.block());
        return this.expressionStatement();
    }
    ifStatement() {
        this.consume(Token.LEFT_PAREN, "Expect '(' after 'if'.");
        const condition = this.expression();
        this.consume(Token.RIGHT_PAREN, "Expect ')' after if condition.");
        const thenBranch = this.statement();
        let elseBranch = null;
        if (this.match(Token.ELSE)) {
            elseBranch = this.statement();
        }
        return new If(condition, thenBranch, elseBranch);
    }
    whileStatement() {
        this.consume(Token.LEFT_PAREN, "Expect '(' after 'while'.");
        const condition = this.expression();
        this.consume(Token.RIGHT_PAREN, "Expect ')' after condition.");
        const body = this.statement();
        return new While(condition, body);
    }
    forStatement() {
        this.consume(Token.LEFT_PAREN, "Expect '(' after 'for'.");
        let initializer;
        if (this.match(Token.SEMICOLON)) {
            initializer = null;
        }
        else if (this.match(Token.VAR)) {
            initializer = this.varDeclaration();
        }
        else {
            initializer = this.expressionStatement();
        }
        let condition = null;
        if (!this.check(Token.SEMICOLON)) {
            condition = this.expression();
        }
        this.consume(Token.SEMICOLON, "Expect ';' after loop condition.");
        let increment = null;
        if (!this.check(Token.RIGHT_PAREN)) {
            increment = this.expression();
        }
        this.consume(Token.RIGHT_PAREN, "Expect ')' after for clauses.");
        let body = this.statement();
        return new For(initializer, condition, increment, body);
    }
    returnStatement() {
        const keyword = this.previous();
        let value = null;
        if (!this.check(Token.SEMICOLON) && !this.check(Token.RIGHT_BRACE)) {
            value = this.expression();
        }
        this.match(Token.SEMICOLON);
        return new Return(value);
    }
    outputStatement() {
        const value = this.expression();
        this.match(Token.SEMICOLON);
        return new Output(value);
    }
    block() {
        const statements = [];
        while (!this.check(Token.RIGHT_BRACE) && !this.isAtEnd()) {
            const decl = this.declaration();
            if (decl)
                statements.push(decl);
        }
        this.consume(Token.RIGHT_BRACE, "Expect '}' after block.");
        return statements;
    }
    expressionStatement() {
        const expr = this.expression();
        this.match(Token.SEMICOLON);
        return new Expression(expr);
    }
    expression() {
        return this.assignment();
    }
    assignment() {
        const expr = this.or();
        if (this.match(Token.EQUAL)) {
            const equals = this.previous();
            const value = this.assignment();
            if (expr instanceof Variable) {
                return new Assign(expr.name, value);
            }
            throw new ParserError("Invalid assignment target.");
        }
        return expr;
    }
    or() {
        let expr = this.and();
        while (this.match(Token.OR_OR)) {
            const operator = this.previous().token;
            const right = this.and();
            expr = new Logical(expr, operator, right);
        }
        return expr;
    }
    and() {
        let expr = this.equality();
        while (this.match(Token.AND_AND)) {
            const operator = this.previous().token;
            const right = this.equality();
            expr = new Logical(expr, operator, right);
        }
        return expr;
    }
    equality() {
        let expr = this.comparison();
        while (this.match(Token.BANG_EQUAL, Token.EQUAL_EQUAL)) {
            const operator = this.previous().token;
            const right = this.comparison();
            expr = new Binary(expr, operator, right);
        }
        return expr;
    }
    comparison() {
        let expr = this.term();
        while (this.match(Token.GREATER, Token.GREATER_EQUAL, Token.LESS, Token.LESS_EQUAL)) {
            const operator = this.previous().token;
            const right = this.term();
            expr = new Binary(expr, operator, right);
        }
        return expr;
    }
    term() {
        let expr = this.factor();
        while (this.match(Token.MINUS, Token.PLUS)) {
            const operator = this.previous().token;
            const right = this.factor();
            expr = new Binary(expr, operator, right);
        }
        return expr;
    }
    factor() {
        let expr = this.unary();
        while (this.match(Token.SLASH, Token.STAR)) {
            const operator = this.previous().token;
            const right = this.unary();
            expr = new Binary(expr, operator, right);
        }
        return expr;
    }
    unary() {
        if (this.match(Token.BANG, Token.MINUS)) {
            const operator = this.previous().token;
            const right = this.unary();
            return new Unary(operator, right);
        }
        return this.call();
    }
    call() {
        let expr = this.primary();
        while (true) {
            if (this.match(Token.LEFT_PAREN)) {
                expr = this.finishCall(expr);
            }
            else {
                break;
            }
        }
        return expr;
    }
    finishCall(callee) {
        const args = [];
        if (!this.check(Token.RIGHT_PAREN)) {
            do {
                if (args.length >= 255) {
                    throw new ParserError("Can't have more than 255 arguments.");
                }
                args.push(this.expression());
            } while (this.match(Token.COMMA));
        }
        const paren = this.consume(Token.RIGHT_PAREN, "Expect ')' after arguments.");
        return new Call(callee, paren, args);
    }
    primary() {
        if (this.match(Token.FALSE))
            return new LiteralBool(false);
        if (this.match(Token.TRUE))
            return new LiteralBool(true);
        if (this.match(Token.NUMBER)) {
            const value = this.previous().value;
            if (value === undefined)
                throw new ParserError("Number token has no value");
            return new LiteralNumber(parseFloat(value));
        }
        if (this.match(Token.STRING)) {
            const value = this.previous().value;
            if (value === undefined)
                throw new ParserError("String token has no value");
            return new LiteralString(value);
        }
        if (this.match(Token.IDENTIFIER)) {
            return new Variable(this.previous());
        }
        if (this.match(Token.LEFT_PAREN)) {
            const expr = this.expression();
            this.consume(Token.RIGHT_PAREN, "Expect ')' after expression.");
            return new Grouping(expr);
        }
        throw new ParserError(`Unexpected token: ${this.peek().token}`);
    }
    synchronize() {
        this.advance();
        while (!this.isAtEnd()) {
            if (this.previous().token === Token.SEMICOLON)
                return;
            switch (this.peek().token) {
                case Token.FUN:
                case Token.VAR:
                case Token.FOR:
                case Token.IF:
                case Token.WHILE:
                case Token.RETURN:
                    return;
            }
            this.advance();
        }
    }
}
//# sourceMappingURL=data:application/json;base64,