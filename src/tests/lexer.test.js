import { Lexer } from "../core/lexer";
import { Token } from "../core/tokens";
describe("Lexer Tests", () => {
    const runLexerTest = (source, expectedTokens) => {
        const lexer = new Lexer(source);
        const tokens = lexer.scanTokens();
        const tokenTypes = tokens.map(t => t.token);
        expect(tokenTypes).toEqual(expectedTokens);
    };
    test("simple variable declaration and assignment", () => {
        runLexerTest("var x = 5", [Token.VAR, Token.IDENTIFIER, Token.EQUAL, Token.NUMBER, Token.EOF]);
    });
    test("arithmetic expressions", () => {
        runLexerTest("var result = 2 + 3 * 4", [
            Token.VAR,
            Token.IDENTIFIER,
            Token.EQUAL,
            Token.NUMBER,
            Token.PLUS,
            Token.NUMBER,
            Token.STAR,
            Token.NUMBER,
            Token.EOF,
        ]);
    });
    test("while loop", () => {
        runLexerTest("while (x > 0) { x = x - 1 }", [
            Token.WHILE,
            Token.LEFT_PAREN,
            Token.IDENTIFIER,
            Token.GREATER,
            Token.NUMBER,
            Token.RIGHT_PAREN,
            Token.LEFT_BRACE,
            Token.IDENTIFIER,
            Token.EQUAL,
            Token.IDENTIFIER,
            Token.MINUS,
            Token.NUMBER,
            Token.RIGHT_BRACE,
            Token.EOF,
        ]);
    });
    test("output statement", () => {
        runLexerTest("out 42", [Token.OUT, Token.NUMBER, Token.EOF]);
    });
    test("complete program", () => {
        runLexerTest(`var count = 5
var sum = 0
while (count > 0) {
    sum = sum + count
    count = count - 1
}
out sum`, [
            Token.VAR,
            Token.IDENTIFIER,
            Token.EQUAL,
            Token.NUMBER,
            Token.VAR,
            Token.IDENTIFIER,
            Token.EQUAL,
            Token.NUMBER,
            Token.WHILE,
            Token.LEFT_PAREN,
            Token.IDENTIFIER,
            Token.GREATER,
            Token.NUMBER,
            Token.RIGHT_PAREN,
            Token.LEFT_BRACE,
            Token.IDENTIFIER,
            Token.EQUAL,
            Token.IDENTIFIER,
            Token.PLUS,
            Token.IDENTIFIER,
            Token.IDENTIFIER,
            Token.EQUAL,
            Token.IDENTIFIER,
            Token.MINUS,
            Token.NUMBER,
            Token.RIGHT_BRACE,
            Token.OUT,
            Token.IDENTIFIER,
            Token.EOF,
        ]);
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGV4ZXIudGVzdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy90ZXN0cy9sZXhlci50ZXN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxLQUFLLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDdEMsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBRXZDLFFBQVEsQ0FBQyxhQUFhLEVBQUUsR0FBRyxFQUFFO0lBQzNCLE1BQU0sWUFBWSxHQUFHLENBQUMsTUFBYyxFQUFFLGNBQXVCLEVBQUUsRUFBRTtRQUMvRCxNQUFNLEtBQUssR0FBRyxJQUFJLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUNoQyxNQUFNLE1BQU0sR0FBRyxLQUFLLENBQUMsVUFBVSxFQUFFLENBQUM7UUFDbEMsTUFBTSxVQUFVLEdBQUcsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUM1QyxNQUFNLENBQUMsVUFBVSxDQUFDLENBQUMsT0FBTyxDQUFDLGNBQWMsQ0FBQyxDQUFDO0lBQzdDLENBQUMsQ0FBQztJQUVGLElBQUksQ0FBQyw0Q0FBNEMsRUFBRSxHQUFHLEVBQUU7UUFDdEQsWUFBWSxDQUFDLFdBQVcsRUFBRSxDQUFDLEtBQUssQ0FBQyxHQUFHLEVBQUUsS0FBSyxDQUFDLFVBQVUsRUFBRSxLQUFLLENBQUMsS0FBSyxFQUFFLEtBQUssQ0FBQyxNQUFNLEVBQUUsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFDakcsQ0FBQyxDQUFDLENBQUM7SUFFSCxJQUFJLENBQUMsd0JBQXdCLEVBQUUsR0FBRyxFQUFFO1FBQ2xDLFlBQVksQ0FBQyx3QkFBd0IsRUFBRTtZQUNyQyxLQUFLLENBQUMsR0FBRztZQUNULEtBQUssQ0FBQyxVQUFVO1lBQ2hCLEtBQUssQ0FBQyxLQUFLO1lBQ1gsS0FBSyxDQUFDLE1BQU07WUFDWixLQUFLLENBQUMsSUFBSTtZQUNWLEtBQUssQ0FBQyxNQUFNO1lBQ1osS0FBSyxDQUFDLElBQUk7WUFDVixLQUFLLENBQUMsTUFBTTtZQUNaLEtBQUssQ0FBQyxHQUFHO1NBQ1YsQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxDQUFDLENBQUM7SUFFSCxJQUFJLENBQUMsWUFBWSxFQUFFLEdBQUcsRUFBRTtRQUN0QixZQUFZLENBQUMsNkJBQTZCLEVBQUU7WUFDMUMsS0FBSyxDQUFDLEtBQUs7WUFDWCxLQUFLLENBQUMsVUFBVTtZQUNoQixLQUFLLENBQUMsVUFBVTtZQUNoQixLQUFLLENBQUMsT0FBTztZQUNiLEtBQUssQ0FBQyxNQUFNO1lBQ1osS0FBSyxDQUFDLFdBQVc7WUFDakIsS0FBSyxDQUFDLFVBQVU7WUFDaEIsS0FBSyxDQUFDLFVBQVU7WUFDaEIsS0FBSyxDQUFDLEtBQUs7WUFDWCxLQUFLLENBQUMsVUFBVTtZQUNoQixLQUFLLENBQUMsS0FBSztZQUNYLEtBQUssQ0FBQyxNQUFNO1lBQ1osS0FBSyxDQUFDLFdBQVc7WUFDakIsS0FBSyxDQUFDLEdBQUc7U0FDVixDQUFDLENBQUM7SUFDTCxDQUFDLENBQUMsQ0FBQztJQUVILElBQUksQ0FBQyxrQkFBa0IsRUFBRSxHQUFHLEVBQUU7UUFDNUIsWUFBWSxDQUFDLFFBQVEsRUFBRSxDQUFDLEtBQUssQ0FBQyxHQUFHLEVBQUUsS0FBSyxDQUFDLE1BQU0sRUFBRSxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztJQUMvRCxDQUFDLENBQUMsQ0FBQztJQUVILElBQUksQ0FBQyxrQkFBa0IsRUFBRSxHQUFHLEVBQUU7UUFDNUIsWUFBWSxDQUNWOzs7Ozs7UUFNRSxFQUNGO1lBQ0UsS0FBSyxDQUFDLEdBQUc7WUFDVCxLQUFLLENBQUMsVUFBVTtZQUNoQixLQUFLLENBQUMsS0FBSztZQUNYLEtBQUssQ0FBQyxNQUFNO1lBQ1osS0FBSyxDQUFDLEdBQUc7WUFDVCxLQUFLLENBQUMsVUFBVTtZQUNoQixLQUFLLENBQUMsS0FBSztZQUNYLEtBQUssQ0FBQyxNQUFNO1lBQ1osS0FBSyxDQUFDLEtBQUs7WUFDWCxLQUFLLENBQUMsVUFBVTtZQUNoQixLQUFLLENBQUMsVUFBVTtZQUNoQixLQUFLLENBQUMsT0FBTztZQUNiLEtBQUssQ0FBQyxNQUFNO1lBQ1osS0FBSyxDQUFDLFdBQVc7WUFDakIsS0FBSyxDQUFDLFVBQVU7WUFDaEIsS0FBSyxDQUFDLFVBQVU7WUFDaEIsS0FBSyxDQUFDLEtBQUs7WUFDWCxLQUFLLENBQUMsVUFBVTtZQUNoQixLQUFLLENBQUMsSUFBSTtZQUNWLEtBQUssQ0FBQyxVQUFVO1lBQ2hCLEtBQUssQ0FBQyxVQUFVO1lBQ2hCLEtBQUssQ0FBQyxLQUFLO1lBQ1gsS0FBSyxDQUFDLFVBQVU7WUFDaEIsS0FBSyxDQUFDLEtBQUs7WUFDWCxLQUFLLENBQUMsTUFBTTtZQUNaLEtBQUssQ0FBQyxXQUFXO1lBQ2pCLEtBQUssQ0FBQyxHQUFHO1lBQ1QsS0FBSyxDQUFDLFVBQVU7WUFDaEIsS0FBSyxDQUFDLEdBQUc7U0FDVixDQUNGLENBQUM7SUFDSixDQUFDLENBQUMsQ0FBQztBQUNMLENBQUMsQ0FBQyxDQUFDIn0=