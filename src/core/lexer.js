import { Token } from './tokens';
export class LexerError extends Error {
    constructor(message) {
        super(message);
        this.name = 'LexerError';
    }
}
const Keywords = {
    "var": Token.VAR,
    "if": Token.IF,
    "else": Token.ELSE,
    "true": Token.TRUE,
    "false": Token.FALSE,
    "for": Token.FOR,
    "while": Token.WHILE,
    "fun": Token.FUN,
    "return": Token.RETURN,
    "out": Token.OUT,
    "in": Token.IN
};
export class Lexer {
    source;
    tokens = [];
    start = 0;
    current = 0;
    line = 1;
    linePos = 0;
    constructor(source) {
        this.source = source;
    }
    isAtEnd() {
        return this.current >= this.source.length;
    }
    advance() {
        this.current++;
        this.linePos++;
        return this.source[this.current - 1];
    }
    addToken(token, value) {
        this.tokens.push({
            token,
            line: this.line,
            linePos: this.linePos,
            value
        });
    }
    match(expected) {
        if (this.isAtEnd())
            return false;
        if (this.source[this.current] !== expected)
            return false;
        this.current++;
        this.linePos++;
        return true;
    }
    peek() {
        if (this.isAtEnd())
            return '\0';
        return this.source[this.current];
    }
    peekNext() {
        if (this.current + 1 >= this.source.length)
            return '\0';
        return this.source[this.current + 1];
    }
    isDigit(c) {
        return c >= '0' && c <= '9';
    }
    isAlpha(c) {
        return (c >= 'a' && c <= 'z') ||
            (c >= 'A' && c <= 'Z') ||
            c === '_';
    }
    isAlphaNumeric(c) {
        return this.isAlpha(c) || this.isDigit(c);
    }
    number() {
        while (this.isDigit(this.peek())) {
            this.advance();
        }
        // Look for a fractional part
        if (this.peek() === '.' && this.isDigit(this.peekNext())) {
            // Consume the "."
            this.advance();
            while (this.isDigit(this.peek())) {
                this.advance();
            }
        }
        const value = this.source.substring(this.start, this.current);
        this.addToken(Token.NUMBER, value);
    }
    string() {
        let value = '';
        while (this.peek() !== '"' && !this.isAtEnd()) {
            if (this.peek() === '\\') {
                this.advance(); // Consume the backslash
                value += this.advance(); // Add the escaped character
            }
            else {
                value += this.advance();
            }
        }
        if (this.isAtEnd()) {
            throw new LexerError(`Unterminated string at ${this.line}:${this.linePos}`);
        }
        // Consume the closing "
        this.advance();
        this.addToken(Token.STRING, value);
    }
    identifier() {
        while (this.isAlphaNumeric(this.peek())) {
            this.advance();
        }
        const text = this.source.substring(this.start, this.current);
        let token = Keywords[text];
        if (!token)
            token = Token.IDENTIFIER;
        this.addToken(token, text);
    }
    scanTokens() {
        while (!this.isAtEnd()) {
            this.start = this.current;
            this.scanToken();
        }
        this.addToken(Token.EOF);
        return this.tokens;
    }
    scanToken() {
        const c = this.advance();
        switch (c) {
            case '(':
                this.addToken(Token.LEFT_PAREN);
                break;
            case ')':
                this.addToken(Token.RIGHT_PAREN);
                break;
            case '{':
                this.addToken(Token.LEFT_BRACE);
                break;
            case '}':
                this.addToken(Token.RIGHT_BRACE);
                break;
            case ',':
                this.addToken(Token.COMMA);
                break;
            case '.':
                this.addToken(Token.DOT);
                break;
            case '-':
                this.addToken(Token.MINUS);
                break;
            case '+':
                this.addToken(Token.PLUS);
                break;
            case ';':
                this.addToken(Token.SEMICOLON);
                break;
            case '*':
                this.addToken(Token.STAR);
                break;
            case '!':
                this.addToken(this.match('=') ? Token.BANG_EQUAL : Token.BANG);
                break;
            case '=':
                this.addToken(this.match('=') ? Token.EQUAL_EQUAL : Token.EQUAL);
                break;
            case '<':
                this.addToken(this.match('=') ? Token.LESS_EQUAL : Token.LESS);
                break;
            case '>':
                this.addToken(this.match('=') ? Token.GREATER_EQUAL : Token.GREATER);
                break;
            case '&':
                this.addToken(this.match('&') ? Token.AND_AND : Token.AND);
                break;
            case '|':
                this.addToken(this.match('|') ? Token.OR_OR : Token.OR);
                break;
            case '/':
                if (this.match('/')) {
                    // A comment goes until the end of the line
                    while (this.peek() !== '\n' && !this.isAtEnd()) {
                        this.advance();
                    }
                }
                else {
                    this.addToken(Token.SLASH);
                }
                break;
            case '"':
                this.string();
                break;
            case ' ':
            case '\r':
            case '\t':
                break;
            case '\n':
                this.line++;
                this.linePos = 0;
                break;
            default:
                if (this.isDigit(c)) {
                    this.number();
                }
                else if (this.isAlpha(c)) {
                    this.identifier();
                }
                else {
                    throw new LexerError(`Unexpected character at ${this.line}:${this.linePos}`);
                }
                break;
        }
    }
}
//# sourceMappingURL=data:application/json;base64,