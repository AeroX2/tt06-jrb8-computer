import { Token } from "../core/tokens";
import { Assembler } from "../core/assembler";
export class CompileError extends Error {
    constructor(message) {
        super(message);
        this.name = "CompileError";
    }
}
export class HardwareCompiler {
    variables = new Map();
    nextVarAddress = 0;
    labelCounter = 0;
    // Group related operators into constants for better maintainability
    static COMPARISON_OPERATORS = new Set([
        Token.GREATER,
        Token.GREATER_EQUAL,
        Token.LESS,
        Token.LESS_EQUAL,
        Token.EQUAL_EQUAL,
    ]);
    static RIGHT_EVAL_FIRST_OPERATORS = new Set([Token.MINUS, Token.SLASH]);
    compileToAssembly(statements) {
        this.variables.clear();
        this.nextVarAddress = 0;
        this.labelCounter = 0;
        // Generate assembly code
        const assemblyLines = [];
        for (const stmt of statements) {
            assemblyLines.push(...stmt.accept(this));
        }
        assemblyLines.push("halt");
        return assemblyLines;
    }
    compileToBytecode(assembly) {
        const assembler = new Assembler();
        const bytecode = assembler.assemble(assembly);
        // Convert to final numeric bytecode with resolved labels
        const resolvedBytecode = assembler.hexOutput(bytecode);
        if (resolvedBytecode.length === 0) {
            throw new CompileError("Failed to resolve all labels in the bytecode");
        }
        return resolvedBytecode;
    }
    createLabel() {
        return `L${this.labelCounter++}`;
    }
    visit(expr) {
        return expr.accept(this);
    }
    visitBinary(expr) {
        if (HardwareCompiler.COMPARISON_OPERATORS.has(expr.op)) {
            return this.handleComparison(expr);
        }
        else if (HardwareCompiler.RIGHT_EVAL_FIRST_OPERATORS.has(expr.op)) {
            return this.handleRightFirst(expr);
        }
        else {
            return this.handleLeftFirst(expr);
        }
    }
    handleComparison(expr) {
        const result = [];
        result.push(...expr.left.accept(this), "mov a b", ...expr.right.accept(this), "mov a c", "opp 0", "cmp b c");
        const skipLabel = this.createLabel();
        const jumpMap = {
            [Token.GREATER]: "<=",
            [Token.GREATER_EQUAL]: "<",
            [Token.LESS]: ">=",
            [Token.LESS_EQUAL]: ">",
            [Token.EQUAL_EQUAL]: "!=",
        };
        result.push(`jmp ${jumpMap[expr.op]} ${skipLabel}`);
        result.push("opp 1");
        result.push(`:${skipLabel}`);
        return result;
    }
    handleRightFirst(expr) {
        const result = [];
        result.push(...expr.right.accept(this), "mov a b", ...expr.left.accept(this));
        const opMap = {
            [Token.MINUS]: "a-b",
            [Token.SLASH]: "a/b",
        };
        result.push(`opp ${opMap[expr.op]}`);
        return result;
    }
    handleLeftFirst(expr) {
        const result = [];
        result.push(...expr.left.accept(this), "mov a b", ...expr.right.accept(this));
        const opMap = {
            [Token.PLUS]: "a+b",
            [Token.STAR]: "a*b",
            [Token.AND]: "a&b",
            [Token.OR]: "a|b",
        };
        if (opMap[expr.op] === undefined) {
            throw new CompileError(`Unknown binary operator: ${expr.op}`);
        }
        result.push(`opp ${opMap[expr.op]}`);
        return result;
    }
    visitGrouping(expr) {
        return expr.expression.accept(this);
    }
    visitUnary(expr) {
        const result = expr.right.accept(this);
        switch (expr.op) {
            case Token.MINUS:
                result.push("opp -a");
                break;
            case Token.TILDE:
                result.push("opp ~a");
                break;
            case Token.BANG: {
                const skipLabel = this.createLabel();
                result.push("cmp a 0");
                result.push("opp 0");
                result.push(`jmp != ${skipLabel}`);
                result.push("opp 1");
                result.push(`:${skipLabel}`);
                break;
            }
        }
        return result;
    }
    visitLiteralBool(expr) {
        return [`opp ${expr.val ? 1 : 0}`];
    }
    visitLiteralString(_expr) {
        throw new CompileError("String literals not supported in hardware implementation");
    }
    visitLiteralNumber(expr) {
        if (expr.val < 0 || expr.val > 255) {
            throw new CompileError("Number out of range (0-255)");
        }
        if (expr.val === 0) {
            return ["opp 0"];
        }
        else if (expr.val === 1) {
            return ["opp 1"];
        }
        else if (expr.val === -1) {
            return ["opp -1"];
        }
        return [`load rom a ${expr.val}`];
    }
    visitInput(_expr) {
        return [`in a`];
    }
    visitVariable(expr) {
        const address = this.variables.get(expr.name.value ?? "");
        if (address === undefined) {
            throw new CompileError(`Undefined variable: ${expr.name.value}`);
        }
        return [`load ram[${address}] a`];
    }
    visitAssign(expr) {
        const result = expr.value.accept(this);
        const address = this.variables.get(expr.name.value ?? "");
        if (address === undefined) {
            throw new CompileError(`Undefined variable: ${expr.name.value}`);
        }
        result.push(`save a ram[${address}]`);
        return result;
    }
    visitLogical(expr) {
        const endLabel = this.createLabel();
        const result = expr.left.accept(this);
        if (expr.op === Token.AND_AND) {
            result.push("cmp a 0", `jmp = ${endLabel}`);
        }
        else if (expr.op === Token.OR_OR) {
            result.push("cmp a 0", `jmp != ${endLabel}`);
        }
        else {
            throw new CompileError(`Unknown logical operator: ${expr.op}`);
        }
        result.push(...expr.right.accept(this), `:${endLabel}`);
        return result;
    }
    visitCall(_expr) {
        throw new CompileError("Function calls not yet implemented for hardware");
    }
    visitExpressionStmt(stmt) {
        return stmt.expression.accept(this);
    }
    visitIfStmt(stmt) {
        const result = stmt.condition.accept(this);
        const elseLabel = this.createLabel();
        const endLabel = this.createLabel();
        result.push("cmp a 0", `jmp = ${elseLabel}`);
        result.push(...stmt.thenBranch.accept(this));
        result.push(`jmp ${endLabel}`);
        result.push(`:${elseLabel}`);
        if (stmt.elseBranch) {
            result.push(...stmt.elseBranch.accept(this));
        }
        result.push(`:${endLabel}`);
        return result;
    }
    // Combine similar loop handling logic
    compileLoopBody(condition, body, increment = null) {
        const startLabel = this.createLabel();
        const endLabel = this.createLabel();
        const result = [];
        result.push(`:${startLabel}`);
        if (condition) {
            result.push(...condition.accept(this), "cmp a 0", `jmp = ${endLabel}`);
        }
        result.push(...body.accept(this));
        if (increment) {
            result.push(...increment.accept(this));
        }
        result.push(`jmp ${startLabel}`, `:${endLabel}`);
        return result;
    }
    visitWhileStmt(stmt) {
        return this.compileLoopBody(stmt.condition, stmt.body);
    }
    visitForStmt(stmt) {
        const result = [];
        if (stmt.initializer) {
            result.push(...stmt.initializer.accept(this));
        }
        result.push(...this.compileLoopBody(stmt.condition, stmt.body, stmt.increment));
        return result;
    }
    visitBlockStmt(stmt) {
        const result = [];
        for (const statement of stmt.statements) {
            result.push(...statement.accept(this));
        }
        return result;
    }
    visitVarStmt(stmt) {
        const result = [];
        const varName = stmt.name;
        const address = this.nextVarAddress++;
        this.variables.set(varName, address);
        if (stmt.initializer) {
            result.push(...stmt.initializer.accept(this), `save a ram[${address}]`);
        }
        return result;
    }
    visitFunctionStmt(_stmt) {
        throw new CompileError("Functions not yet implemented for hardware");
    }
    visitReturnStmt(_stmt) {
        throw new CompileError("Return not yet implemented for hardware");
    }
    visitOutputStmt(stmt) {
        const result = stmt.expression.accept(this);
        result.push("out a");
        return result;
    }
}
//# sourceMappingURL=data:application/json;base64,